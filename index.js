let e=class Core{props={};element={}};class Cthulhu{#e;#t;#n;#s;static instance(t,n={},s={build:async(t,n)=>new e,change:async e=>{}}){return new Cthulhu(t,n,s)}constructor(t,n={},s={build:async(t,n)=>new e,change:async e=>{}}){this.#e=s,this.#n=t,this.#s=n}get template(){return this.#n}set template(e){this.#n=e}get engine(){return this.#e}get element(){return this.#t}set element(e){this.#t=e}build=async()=>this.#e.build(this.#n,this.#s).then((e=>(this.#t=e.element,Object.assign(this,e.props),this)));change=async()=>this.#e.change(this)}const tentacle=(e={},t={},n={build:async(e,t)=>new Core,change:async e=>e},s=(([e,t])=>e==e))=>Object.entries(t).filter(s).map((([t,s])=>(e[t]=s,Array.isArray(s)?Promise.all(s.map((e=>Cthulhu.instance(e,{key:t},n).build()))):Cthulhu.instance(s,{key:t},n).build())));export{e as Core,Cthulhu,tentacle};
